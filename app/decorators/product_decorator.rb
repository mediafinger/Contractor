class ProductDecorator < Draper::Decorator

  delegate_all


  def description
    "#{key} - #{name} || #{price_as_currency} / #{unit.humanize}"
  end

  def price_as_currency
    h.number_to_currency(price, :precision => 2, :unit => "â‚¬", :format => "%n %u")
  end


  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
